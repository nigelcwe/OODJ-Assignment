/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import application.entities.GymSystem;
import domain.entities.Booking;
import domain.entities.Customer;
import domain.entities.Staff;
import domain.enums.FileSelection;
import domain.enums.Role;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;

/**
 *
 * @author chanw
 */
public class ManagerMain extends javax.swing.JFrame {
    private Staff manager;
    private final GymSystem gym = new GymSystem();
    private int refreshMode = 0;

    /**
     * Creates new form ManagerMain
     */
    public ManagerMain() throws Exception {
        initComponents();
        refresh(this.refreshMode);
    }

    public ManagerMain(Staff manager) throws Exception {
        initComponents();
        this.manager = manager;
        refresh(this.refreshMode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpFilter = new javax.swing.ButtonGroup();
        panelBookings = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBookings = new javax.swing.JTable();
        btnDeleteBooking = new javax.swing.JButton();
        panelFilters = new javax.swing.JPanel();
        rbtnAllBooking = new javax.swing.JRadioButton();
        rbtnCompleted = new javax.swing.JRadioButton();
        rbtnIncomplete = new javax.swing.JRadioButton();
        btnSearch = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        panelSessionBooking = new javax.swing.JPanel();
        lblBookingCustomer = new javax.swing.JLabel();
        cmbBookingCustomer = new javax.swing.JComboBox<>();
        cmbBookingTrainer = new javax.swing.JComboBox<>();
        lblBookingTrainer = new javax.swing.JLabel();
        lblBookingStartTime = new javax.swing.JLabel();
        spinBookingHour = new javax.swing.JSpinner();
        lblBookingDuration = new javax.swing.JLabel();
        spinBookingMinute = new javax.swing.JSpinner();
        btnBooking = new javax.swing.JButton();
        spinBookingDuration = new javax.swing.JSpinner();
        cmbBookingDay = new javax.swing.JComboBox<>();
        cmbBookingMonth = new javax.swing.JComboBox<>();
        cmbBookingYear = new javax.swing.JComboBox<>();
        lblBookingDate = new javax.swing.JLabel();
        panelNavigation = new javax.swing.JPanel();
        btnRegistration = new javax.swing.JButton();
        btnEditDetails = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        panelReportGeneration = new javax.swing.JPanel();
        btnGenerateReport = new javax.swing.JButton();
        lblReportDate = new javax.swing.JLabel();
        cmbReportMonth = new javax.swing.JComboBox<>();
        cmbReportYear = new javax.swing.JComboBox<>();
        lblWelcome = new javax.swing.JLabel();
        lblManagerName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manager Home");
        setResizable(false);

        panelBookings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Bookings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI Historic", 0, 12))); // NOI18N

        tblBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Customer Name", "Trainer Name", "Booking Date", "Start Time", "End Time", "Completion Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBookings.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblBookings.setName("tblIncompleteBooking"); // NOI18N
        jScrollPane2.setViewportView(tblBookings);

        btnDeleteBooking.setText("Delete Selected Booking");
        btnDeleteBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookingActionPerformed(evt);
            }
        });

        panelFilters.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filter by:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI Historic", 0, 12))); // NOI18N

        btnGrpFilter.add(rbtnAllBooking);
        rbtnAllBooking.setSelected(true);
        rbtnAllBooking.setText("All Bookings");
        rbtnAllBooking.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnAllBookingItemStateChanged(evt);
            }
        });

        btnGrpFilter.add(rbtnCompleted);
        rbtnCompleted.setText("Completed Bookings");
        rbtnCompleted.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnCompletedItemStateChanged(evt);
            }
        });

        btnGrpFilter.add(rbtnIncomplete);
        rbtnIncomplete.setText("Incomplete Bookings");
        rbtnIncomplete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnIncompleteItemStateChanged(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFiltersLayout = new javax.swing.GroupLayout(panelFilters);
        panelFilters.setLayout(panelFiltersLayout);
        panelFiltersLayout.setHorizontalGroup(
            panelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rbtnAllBooking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbtnIncomplete, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                    .addComponent(rbtnCompleted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelFiltersLayout.setVerticalGroup(
            panelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFiltersLayout.createSequentialGroup()
                        .addComponent(rbtnAllBooking)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnIncomplete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbtnCompleted))
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelBookingsLayout = new javax.swing.GroupLayout(panelBookings);
        panelBookings.setLayout(panelBookingsLayout);
        panelBookingsLayout.setHorizontalGroup(
            panelBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBookingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(panelFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteBooking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelBookingsLayout.setVerticalGroup(
            panelBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBookingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteBooking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelSessionBooking.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Session Booking", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI Historic", 0, 12))); // NOI18N

        lblBookingCustomer.setText("Customer:");

        cmbBookingCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name" }));

        cmbBookingTrainer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name" }));

        lblBookingTrainer.setText("Trainer:");

        lblBookingStartTime.setText("Starting Time :");

        spinBookingHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 24, 1));

        lblBookingDuration.setText("Duration (hours):");

        spinBookingMinute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 10));

        btnBooking.setText("Book");
        btnBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingActionPerformed(evt);
            }
        });

        spinBookingDuration.setModel(new javax.swing.SpinnerNumberModel(1, 1, 3, 1));

        cmbBookingDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        cmbBookingMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        cmbBookingYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "2022" }));

        lblBookingDate.setText("Date: ");

        javax.swing.GroupLayout panelSessionBookingLayout = new javax.swing.GroupLayout(panelSessionBooking);
        panelSessionBooking.setLayout(panelSessionBookingLayout);
        panelSessionBookingLayout.setHorizontalGroup(
            panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSessionBookingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBooking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSessionBookingLayout.createSequentialGroup()
                        .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBookingStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBookingCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBookingTrainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBookingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBookingDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbBookingTrainer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinBookingDuration)
                            .addGroup(panelSessionBookingLayout.createSequentialGroup()
                                .addComponent(spinBookingHour, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinBookingMinute))
                            .addGroup(panelSessionBookingLayout.createSequentialGroup()
                                .addComponent(cmbBookingDay, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbBookingMonth, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbBookingYear, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbBookingCustomer, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelSessionBookingLayout.setVerticalGroup(
            panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSessionBookingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBookingCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookingCustomer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingTrainer)
                    .addComponent(cmbBookingTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBookingDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBookingMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBookingYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookingDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinBookingHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinBookingMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookingStartTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSessionBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinBookingDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBookingDuration))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBooking, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelNavigation.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Navigation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI Historic", 0, 12))); // NOI18N

        btnRegistration.setText("Registration");
        btnRegistration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrationActionPerformed(evt);
            }
        });

        btnEditDetails.setText("Edit Details");
        btnEditDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDetailsActionPerformed(evt);
            }
        });

        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNavigationLayout = new javax.swing.GroupLayout(panelNavigation);
        panelNavigation.setLayout(panelNavigationLayout);
        panelNavigationLayout.setHorizontalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRegistration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEditDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelNavigationLayout.setVerticalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelReportGeneration.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Report Generation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI Historic", 0, 12))); // NOI18N
        panelReportGeneration.setName(""); // NOI18N

        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        lblReportDate.setText("Date: ");

        cmbReportMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        cmbReportYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "2022" }));

        javax.swing.GroupLayout panelReportGenerationLayout = new javax.swing.GroupLayout(panelReportGeneration);
        panelReportGeneration.setLayout(panelReportGenerationLayout);
        panelReportGenerationLayout.setHorizontalGroup(
            panelReportGenerationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReportGenerationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelReportGenerationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerateReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelReportGenerationLayout.createSequentialGroup()
                        .addComponent(lblReportDate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbReportMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbReportYear, 0, 88, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelReportGenerationLayout.setVerticalGroup(
            panelReportGenerationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReportGenerationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelReportGenerationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbReportMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbReportYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblReportDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblWelcome.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 18)); // NOI18N
        lblWelcome.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblWelcome.setText("Welcome back,");

        lblManagerName.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 18)); // NOI18N
        lblManagerName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(lblWelcome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblManagerName, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelBookings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelReportGeneration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelNavigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSessionBooking, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSessionBooking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelReportGeneration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelNavigation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblManagerName, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBookings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegistrationActionPerformed

    private void btnEditDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditDetailsActionPerformed

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt)  {//GEN-FIRST:event_btnGenerateReportActionPerformed
        // TODO add your handling code here:
        try {
            LocalDateTime date = LocalDateTime.of(Integer.parseInt(String.valueOf(cmbReportYear.getSelectedItem())), cmbReportMonth.getSelectedIndex(), 1, 12, 0);
            gym.getReport().generateReport(date);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File(FileSelection.MonthlyReport.toString());
                Desktop.getDesktop().open(myFile);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void btnBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingActionPerformed
        // TODO add your handling code here:

        try {
            ArrayList<String[]> allCustomer = gym.getCustomer().getAllCustomer();
            ArrayList<String[]> allTrainer = gym.getStaff().getByRole(Role.Trainer);
            int customerId = -1;
            int trainerId = -1;
            for (String[] i : allCustomer) {
                Customer customerI = gym.getCustomer().getCustomer(i);
                if (customerI.getFullName().equals(cmbBookingCustomer.getSelectedItem().toString())) {
                    if (customerI.getBookingId() != -1) throw new Exception("Customer already has an active booking!");
                    customerId = customerI.getId();
                    break;
                }
            }

            for (String[] j : allTrainer) {
                Staff trainerJ = gym.getStaff().getStaff(j);
                if (trainerJ.getFullName().equals(cmbBookingTrainer.getSelectedItem().toString())) {
                    trainerId = trainerJ.getId();
                    break;
                }
            }

            if (customerId == -1) throw new Exception("Customer not found!");
            if (trainerId == -1) throw new Exception("Trainer not found!");
            LocalDateTime startTime = LocalDateTime.of(
                    Integer.parseInt(cmbBookingYear.getSelectedItem().toString()),
                    cmbBookingMonth.getSelectedIndex(),
                    Integer.parseInt(cmbBookingDay.getSelectedItem().toString()),
                    Integer.parseInt(spinBookingHour.getValue().toString()),
                    Integer.parseInt(spinBookingMinute.getValue().toString())
            );
            LocalDateTime endTime = startTime.plusHours(Integer.parseInt(spinBookingDuration.getValue().toString()));

            Booking newBooking = new Booking(
                    gym.getBooking().generateId(),
                    customerId,
                    trainerId,
                    LocalDateTime.now(),
                    startTime,
                    endTime,
                    40 * Integer.parseInt(spinBookingDuration.getValue().toString()),
                    false,
                    false,
                    "null"
            );

            int status = gym.getBooking().createBooking(newBooking);

            if (status == 0) {
                Customer customer = gym.getCustomer().getById(customerId);
                customer.setBookingId(newBooking.getId());
                gym.getCustomer().modifyCustomer(customer);
                JOptionPane.showMessageDialog(null, "Booking successfully created!", "Info", JOptionPane.INFORMATION_MESSAGE);
                refresh(this.refreshMode);
            } else throw new Exception("Booking was not created!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBookingActionPerformed

    private void btnDeleteBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookingActionPerformed
        // TODO add your handling code here:
        try {
            if (tblBookings.getSelectedRow() == -1) throw new Exception("Please select a booking to be deleted!");
            if (tblBookings.getSelectedRows().length > 1) throw new Exception("Please select only ONE booking!");
            int bookingId = Integer.parseInt(tblBookings.getValueAt(tblBookings.getSelectedRow(), 0).toString());
            Booking booking = gym.getBooking().getById(bookingId);
            if (booking.isCompleted()) throw new Exception("Completed bookings cannot be deleted!");
            int status = gym.getBooking().deleteBooking(booking);

            if (status == 1) throw new Exception("Booking was not deleted");

            Customer customer = gym.getCustomer().getById(booking.getCustomerId());
            customer.setBookingId(-1);
            gym.getCustomer().modifyCustomer(customer);
            refresh(this.refreshMode);
            JOptionPane.showMessageDialog(null, "Booking successfully deleted!", "Info", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteBookingActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new LoginFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        refresh(this.refreshMode);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        refresh(0);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void rbtnAllBookingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnAllBookingItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) this.refreshMode = 0;
    }//GEN-LAST:event_rbtnAllBookingItemStateChanged

    private void rbtnIncompleteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnIncompleteItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) this.refreshMode = 1;
    }//GEN-LAST:event_rbtnIncompleteItemStateChanged

    private void rbtnCompletedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnCompletedItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) this.refreshMode = 2;
    }//GEN-LAST:event_rbtnCompletedItemStateChanged

    private void clear() {
        DefaultTableModel tblModel = (DefaultTableModel) tblBookings.getModel();

        try {
            while (tblBookings.getRowCount() > 0) {
                tblModel.removeRow(0);
            }

            if (cmbBookingCustomer.getItemCount() > 1) {
                cmbBookingCustomer.removeAllItems();
                cmbBookingCustomer.addItem("Name");
            }

            if (cmbBookingTrainer.getItemCount() > 1) {
                cmbBookingTrainer.removeAllItems();
                cmbBookingTrainer.addItem("Name");
            }

            if (cmbBookingYear.getItemCount() > 2) {
                cmbBookingYear.removeAllItems();
                cmbBookingYear.addItem("Year");
                cmbBookingYear.addItem("2022");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refresh(int mode) {
        try {
            DefaultTableModel tblModel = (DefaultTableModel) tblBookings.getModel();
            DefaultComboBoxModel cmbBookingCustomerModel = (DefaultComboBoxModel) cmbBookingCustomer.getModel();
            DefaultComboBoxModel cmbBookingTrainerModel = (DefaultComboBoxModel) cmbBookingTrainer.getModel();
            DefaultComboBoxModel cmbBookingYearModel = (DefaultComboBoxModel) cmbBookingYear.getModel();
            ArrayList<String[]> allCustomer = gym.getCustomer().getAllCustomer();
            ArrayList<String[]> allTrainer = gym.getStaff().getByRole(Role.Trainer);

            clear();

            lblManagerName.setText(this.manager.getFullName());

            if (mode == 0) {
                clear();
                ArrayList<String[]> allBooking = gym.getBooking().getAllBooking();

                for (String[] i : allBooking) {
                    Booking bookingI = gym.getBooking().getBooking(i);
                    Customer customerI = gym.getCustomer().getById(Integer.parseInt(i[1]));
                    Staff trainerI = gym.getStaff().getById(Integer.parseInt(i[2]));
                    String[] row = {
                            i[0],
                            customerI.getFullName(),
                            trainerI.getFullName(),
                            bookingI.getStartTime().toLocalDate().toString(),
                            bookingI.getStartTime().toLocalTime().toString(),
                            bookingI.getEndTime().toLocalTime().toString(),
                            String.valueOf(bookingI.isCompleted())
                    };
                    tblModel.addRow(row);
                }

                ArrayList<Integer> bookingYear = new ArrayList<>();
                for (String[] l : allBooking) {
                    Booking bookingL = gym.getBooking().getBooking(l);
                    if (bookingL.getStartTime().getYear() == Integer.parseInt(cmbBookingYearModel.getElementAt(1).toString()))
                        continue;
                    if ((bookingYear.size() == 0) || (bookingYear.get(bookingYear.size() - 1) != bookingL.getStartTime().getYear())) {
                        bookingYear.add(bookingL.getStartTime().getYear());
                    }
                }
                cmbBookingYearModel.addAll(bookingYear);

            } else if (mode == 1) {
                clear();
                ArrayList<String[]> allIncompleteBooking = gym.getBooking().getIncomplete();

                for (String[] i : allIncompleteBooking) {
                    Booking bookingI = gym.getBooking().getBooking(i);
                    Customer customerI = gym.getCustomer().getById(Integer.parseInt(i[1]));
                    Staff trainerI = gym.getStaff().getById(Integer.parseInt(i[2]));
                    String[] row = {
                            i[0],
                            customerI.getFullName(),
                            trainerI.getFullName(),
                            bookingI.getStartTime().toLocalDate().toString(),
                            bookingI.getStartTime().toLocalTime().toString(),
                            bookingI.getEndTime().toLocalTime().toString(),
                            String.valueOf(bookingI.isCompleted())
                    };
                    tblModel.addRow(row);
                }

                ArrayList<Integer> bookingYear = new ArrayList<>();
                for (String[] l : allIncompleteBooking) {
                    Booking bookingL = gym.getBooking().getBooking(l);
                    if (bookingL.getStartTime().getYear() == Integer.parseInt(cmbBookingYearModel.getElementAt(1).toString()))
                        continue;
                    if ((bookingYear.size() == 0) || (bookingYear.get(bookingYear.size() - 1) != bookingL.getStartTime().getYear())) {
                        bookingYear.add(bookingL.getStartTime().getYear());
                    }
                }
                cmbBookingYearModel.addAll(bookingYear);

            } else if (mode == 2) {
                clear();
                ArrayList<String[]> allCompletedBooking = gym.getBooking().getCompleted();

                for (String[] i : allCompletedBooking) {
                    Booking bookingI = gym.getBooking().getBooking(i);
                    Customer customerI = gym.getCustomer().getById(Integer.parseInt(i[1]));
                    Staff trainerI = gym.getStaff().getById(Integer.parseInt(i[2]));
                    String[] row = {
                            i[0],
                            customerI.getFullName(),
                            trainerI.getFullName(),
                            bookingI.getStartTime().toLocalDate().toString(),
                            bookingI.getStartTime().toLocalTime().toString(),
                            bookingI.getEndTime().toLocalTime().toString(),
                            String.valueOf(bookingI.isCompleted())
                    };
                    tblModel.addRow(row);
                }

                ArrayList<Integer> bookingYear = new ArrayList<>();
                for (String[] l : allCompletedBooking) {
                    Booking bookingL = gym.getBooking().getBooking(l);
                    if (bookingL.getStartTime().getYear() == Integer.parseInt(cmbBookingYearModel.getElementAt(1).toString()))
                        continue;
                    if ((bookingYear.size() == 0) || (bookingYear.get(bookingYear.size() - 1) != bookingL.getStartTime().getYear())) {
                        bookingYear.add(bookingL.getStartTime().getYear());
                    }
                }
                cmbBookingYearModel.addAll(bookingYear);
            }

            ArrayList<String> customerFullName = new ArrayList<>();
            for (String[] j : allCustomer) {
                Customer customerJ = gym.getCustomer().getCustomer(j);
                customerFullName.add(customerJ.getFullName());
            }
            cmbBookingCustomerModel.addAll(customerFullName);

            ArrayList<String> trainerFullName = new ArrayList<>();
            for (String[] k : allTrainer) {
                Staff trainerK = gym.getStaff().getStaff(k);
                trainerFullName.add(trainerK.getFullName());
            }
            cmbBookingTrainerModel.addAll(trainerFullName);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ManagerMain().setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBooking;
    private javax.swing.JButton btnDeleteBooking;
    private javax.swing.JButton btnEditDetails;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.ButtonGroup btnGrpFilter;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRegistration;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbBookingCustomer;
    private javax.swing.JComboBox<String> cmbBookingDay;
    private javax.swing.JComboBox<String> cmbBookingMonth;
    private javax.swing.JComboBox<String> cmbBookingTrainer;
    private javax.swing.JComboBox<String> cmbBookingYear;
    private javax.swing.JComboBox<String> cmbReportMonth;
    private javax.swing.JComboBox<String> cmbReportYear;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBookingCustomer;
    private javax.swing.JLabel lblBookingDate;
    private javax.swing.JLabel lblBookingDuration;
    private javax.swing.JLabel lblBookingStartTime;
    private javax.swing.JLabel lblBookingTrainer;
    private javax.swing.JLabel lblManagerName;
    private javax.swing.JLabel lblReportDate;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JPanel panelBookings;
    private javax.swing.JPanel panelFilters;
    private javax.swing.JPanel panelNavigation;
    private javax.swing.JPanel panelReportGeneration;
    private javax.swing.JPanel panelSessionBooking;
    private javax.swing.JRadioButton rbtnAllBooking;
    private javax.swing.JRadioButton rbtnCompleted;
    private javax.swing.JRadioButton rbtnIncomplete;
    private javax.swing.JSpinner spinBookingDuration;
    private javax.swing.JSpinner spinBookingHour;
    private javax.swing.JSpinner spinBookingMinute;
    private javax.swing.JTable tblBookings;
    // End of variables declaration//GEN-END:variables
}
